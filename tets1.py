import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

ADMIN_ID = 5885452017
users_set = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
total_users = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
stats = {}



# ========== üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω ==========
import os
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# ========== üî¢ –¢–µ—Å—Ç—ã ==========
test_data = {
    '–¢–µ—Å—Ç –Ω–∞ –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥': {
        'description': "–û—Ü–µ–Ω–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ç—Ä–∞–≤–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.",
        'questions': [
            {'question': "–ú–Ω–µ –ø–∏—Å–∞–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–ú–æ–∏ –ª–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ/–¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–Ω–∏–∑–∏—Ç—å –º–µ–Ω—è.", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–ú–µ–Ω—è –∏—Å–∫–ª—é—á–∞–ª–∏ –∏–∑ —á–∞—Ç–æ–≤/–≥—Ä—É–ø–ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–±–∏–¥–µ—Ç—å.", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–ú–Ω–µ —É–≥—Ä–æ–∂–∞–ª–∏ –∏–ª–∏ —à–∞–Ω—Ç–∞–∂–∏—Ä–æ–≤–∞–ª–∏ –≤ —Å–µ—Ç–∏.", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–Ø –±–æ—è–ª—Å—è(-–∞—Å—å) –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç–∏ –∏–∑-–∑–∞ —Ç—Ä–∞–≤–ª–∏.", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
        ]
    },
    '–¢–µ—Å—Ç –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è SHPS)': {
        'description': "–û—Ü–µ–Ω–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã—Ö –º—ã—Å–ª–µ–π —Å–µ–π—á–∞—Å (–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º).",
         'questions': [
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ —è –¥—É–º–∞–ª –æ —Å–º–µ—Ä—Ç–∏", 'answers': ['–î–∞', '–ù–µ—Ç'], 'scores': [2, 0]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –º–Ω–µ –∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –∂–∏–∑–Ω—å –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞", 'answers': ['–î–∞', '–ù–µ—Ç'], 'scores': [2, 0]},
            {'question': "–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–ª(-–∞), –∫–∞–∫ –º–æ–≥—É –ø—Ä–∏—á–∏–Ω–∏—Ç—å —Å–µ–±–µ –≤—Ä–µ–¥", 'answers': ['–î–∞', '–ù–µ—Ç'], 'scores': [2, 0]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–ª–∞–Ω —É–π—Ç–∏ –∏–∑ –∂–∏–∑–Ω–∏", 'answers': ['–î–∞', '–ù–µ—Ç'], 'scores': [2, 0]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ –Ω–∏–∫–æ–º—É –Ω–µ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö", 'answers': ['–î–∞', '–ù–µ—Ç'], 'scores': [2, 0]},
         ]
    },
     '–®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–≥–∏ (GAD-7, —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)': {
        'description': "–û—Ü–µ–Ω–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ–≤–æ–≥–∏ —Å–µ–π—á–∞—Å (–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º).",
        'questions': [
            {'question': "–Ø —á—É–≤—Å—Ç–≤—É—é/—á—É–≤—Å—Ç–≤–æ–≤–∞–ª(-–∞) –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –º–Ω–µ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–Ø –∏–∑–±–µ–≥–∞—é/–∏–∑–±–µ–≥–∞–ª(-–∞) —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç —Ç—Ä–µ–≤–æ–≥—É", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–£ –º–µ–Ω—è –±—ã–≤–∞—é—Ç/–±—ã–ª–∏ –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞', '–ß–∞—Å—Ç–æ'], 'scores': [0, 1, 2, 3]},
        ]
    },
    '–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é (PHQ-9, —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)': {
        'description': "–û—Ü–µ–Ω–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–µ–ø—Ä–µ—Å—Å–∏–∏ —Å–µ–π—á–∞—Å (–∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º).",
        'questions': [
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ —Ä–∞–¥–æ—Å—Ç—å", 'answers': ['–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞','–ß–∞—Å—Ç–æ','–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(-–∞) —É—Å—Ç–∞–ª–æ—Å—Ç—å, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª(-–∞)", 'answers': ['–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞','–ß–∞—Å—Ç–æ','–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –º–Ω–µ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è", 'answers': ['–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞','–ß–∞—Å—Ç–æ','–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–£ –º–µ–Ω—è –±—ã–ª –ø–µ—Ä–∏–æ–¥, –∫–æ–≥–¥–∞ –¥—É–º–∞–ª(-–∞), —á—Ç–æ —è –Ω–µ—É–¥–∞—á–Ω–∏–∫(-—Ü–∞)", 'answers': ['–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞','–ß–∞—Å—Ç–æ','–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'], 'scores': [0, 1, 2, 3]},
            {'question': "–£ –º–µ–Ω—è –±—ã–≤–∞—é—Ç/–±—ã–ª–∏ –º—ã—Å–ª–∏ –æ —Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏", 'answers': ['–†–µ–¥–∫–æ','–ò–Ω–æ–≥–¥–∞','–ß–∞—Å—Ç–æ','–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'], 'scores': [0, 1, 2, 3]},
        ]
    },
    '–¢–µ—Å—Ç –Ω–∞ –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ –∞–≥—Ä–µ—Å—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è CBPS)': {
        'description': "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∏ —Ñ–æ—Ä–º—ã –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–Ω–∞–ø–æ–º–∏–Ω–∞—é, —Ç–µ—Å—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π).",
        'questions': [
            {'question': "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–∏—Å–∞–ª(–∞) –≥—Ä—É–±—ã–µ/–æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ —á—É–∂–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏?", 'answers': ['–ù–∏–∫–æ–≥–¥–∞', '–û–¥–∏–Ω-–¥–≤–∞ —Ä–∞–∑–∞', '–†–µ–≥—É–ª—è—Ä–Ω–æ'], 'scores': [0, 1, 2]},
            {'question': "–¢—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–ª(–∞) –ª–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ/–ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–µ–ª–æ–≤–µ–∫–∞ –±–µ–∑ –µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è?", 'answers': ['–ù–µ—Ç', '–î–∞, –Ω–æ ¬´–ø—Ä–æ—Å—Ç–æ —Ç–∞–∫¬ª', '–î–∞, —á—Ç–æ–±—ã —É–Ω–∏–∑–∏—Ç—å'], 'scores': [0, 1, 2]},
            {'question': "–°–æ–∑–¥–∞–≤–∞–ª(–∞) –ª–∏ —Ç—ã —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞?", 'answers': ['–ù–µ—Ç', '–î–∞, —Ä–∞–¥–∏ —à—É—Ç–∫–∏', '–î–∞, —á—Ç–æ–±—ã –∑–∞–¥–µ—Ç—å'], 'scores': [0, 1, 2]},
            {'question': "–¢—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ç—Ä–æ–ª–ª–∏–Ω–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —á–∞—Ç–∞—Ö –∫–ª–∞—Å—Å–∞)?", 'answers': ['–ù–µ—Ç', '–ë—ã–ª(–∞) –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–º', '–î–∞, –ø–∏—Å–∞–ª(–∞) –≥–∞–¥–æ—Å—Ç–∏'], 'scores': [0, 1, 2]},
            {'question': "–¢—ã —É–≥—Ä–æ–∂–∞–ª(–∞) –∫–æ–º—É-—Ç–æ –≤ —Å–µ—Ç–∏ (–¥–∞–∂–µ ¬´–≤ —à—É—Ç–∫—É¬ª)?", 'answers': ['–ù–µ—Ç', '–î–∞, –Ω–æ –Ω–µ –≤—Å–µ—Ä—å—ë–∑', '–î–∞, —á—Ç–æ–±—ã –Ω–∞–ø—É–≥–∞—Ç—å'], 'scores': [0, 1, 2]},
        ]
    }
}
# ========== üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ==========
def interpret_result(test_name, score):
    if test_name == '–¢–µ—Å—Ç –Ω–∞ –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥':
        if score <= 5:
            return "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        elif score <= 10:
            return "–£–º–µ—Ä–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞"
        else:
            return "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–∞–≤–ª–∏"

    elif test_name == '–¢–µ—Å—Ç –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è SHPS)':
        if score <= 4:
            return "–£ –≤–∞—Å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è."
        else:
            return (
                "–î–∞–∂–µ –µ—Å–ª–∏ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤—ã—Ö–æ–¥–∞ –Ω–µ—Ç, –æ–Ω –µ—Å—Ç—å.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (–ø—Å–∏—Ö–æ–ª–æ–≥—É) –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
            )
    elif test_name == '–®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–≥–∏ (GAD-7, —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)':
        if score <= 4:
            return "–£ –≤–∞—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏."
        elif score <= 9:
            return "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏."
        else:
            return "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (–ø—Å–∏—Ö–æ–ª–æ–≥—É), –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."

    elif test_name == '–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é (PHQ-9, —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)':
        if score <= 6:
            return "–ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏."
        elif score <= 12:
            return "–õ–µ–≥–∫–∞—è/—É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è."
        else:
            return "–¢—è–∂–µ–ª–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (–ø—Å–∏—Ö–æ–ª–æ–≥—É),–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ."

    elif test_name == '–¢–µ—Å—Ç –Ω–∞ –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ –∞–≥—Ä–µ—Å—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è CBPS)':
        if score <= 4:
            return "–ù–∏–∑–∫–∞—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."

        else:
            return "–í—ã—Å–æ–∫–∞—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (–ø—Å–∏—Ö–æ–ª–æ–≥—É)."
    else:
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ —à–∫–∞–ª—ã"

def update_stats(test_name, result_text):
    if test_name not in stats:
        stats[test_name] = {}
    if result_text not in stats[test_name]:
        stats[test_name][result_text] = 0
    stats[test_name][result_text] += 1

# ========== üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==========
user_states = {}

# ========== üöÄ –°—Ç–∞—Ä—Ç ==========
@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    user_states[chat_id] = {
        'test_names': list(test_data.keys()),
        'current_test': 0,
        'current_question': 0,
        'score': 0
    }

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,! üëã\n\n"
        "–î–∞–ª–µ–µ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–æ–π—Ç–∏ 5 —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–º—É –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞. –≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç —É –≤–∞—Å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è '–í–ª–∏—è–Ω–∏–µ –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞ –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤'.\n"
        "–û–±—Ä–∞—â–∞—é –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –Ω–µ –¥–∏–∞–≥–Ω–æ–∑. –ï—Å–ª–∏ –≤–∞—Å —á—Ç–æ-—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç, –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º (–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º).\n\n"
        "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ç–µ—Å—Ç—É!"
    )

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_tests"))

    bot.send_message(chat_id, greeting_message, reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data == 'start_tests')
def handle_start_tests(call):
    chat_id = call.message.chat.id
    send_question(chat_id)

def send_question(chat_id):
    state = user_states[chat_id]
    test_name = state['test_names'][state['current_test']]
    test = test_data[test_name]
    q_index = state['current_question']
    question_data = test['questions'][q_index]

    markup = InlineKeyboardMarkup()
    for i, ans in enumerate(question_data['answers']):
        callback_data = f"answer:{i}"
        markup.add(InlineKeyboardButton(ans, callback_data=callback_data))

    bot.send_message(chat_id, f"*{test_name}*\n_{test['description']}_\n\n{question_data['question']}",
                     parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer:'))
def handle_answer(call):
    global total_users
    chat_id = call.message.chat.id
    index = int(call.data.split(":")[1])
    state = user_states[chat_id]
    test_name = state['test_names'][state['current_test']]
    test = test_data[test_name]
    q_index = state['current_question']

    score = test['questions'][q_index]['scores'][index]
    state['score'] += score
    state['current_question'] += 1

    if state['current_question'] < len(test['questions']):
        send_question(chat_id)
    else:
        result_text = interpret_result(test_name, state['score'])
        update_stats(test_name, result_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ—Å—Ç—É
        bot.send_message(chat_id, f"‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ—Å—Ç—É ¬´{test_name}¬ª:*\n\n{result_text}", parse_mode="Markdown")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–ª–æ–≤
        if test_name in ['–¢–µ—Å—Ç –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è SHPS)', '–®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–≥–∏ (GAD-7, —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)', '–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é (PHQ-9, —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)']:
            if state['score'] >= 4:  # –ï—Å–ª–∏ –±–∞–ª–ª –≤—ã—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–î–∞", callback_data="additional_yes"))
                markup.add(InlineKeyboardButton("–ù–µ—Ç", callback_data="additional_no"))
                bot.send_message(
                    chat_id,
                    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: –î–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –ø–æ—Å–ª–µ –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞?",
                    reply_markup=markup
                )

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–¥–∞–Ω
                state['additional_question_asked'] = True
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É, –µ—Å–ª–∏ –±–∞–ª–ª—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ø–æ—Ä–æ–≥
                if state['current_test'] < len(state['test_names']) - 1:
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É", callback_data="next_test"))
                    bot.send_message(chat_id, "–ù–∞–∂–º–∏ '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=markup)
                else:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç
                    bot.send_message(chat_id, "üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏.")
                    user_states.pop(chat_id)
                    users_set.add(chat_id)

        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ—Ç —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            if state['current_test'] < len(state['test_names']) - 1:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É", callback_data="next_test"))
                bot.send_message(chat_id, "–ù–∞–∂–º–∏ '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=markup)
            else:
                bot.send_message(chat_id, "üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏.")
                user_states.pop(chat_id)
                users_set.add(chat_id)

@bot.callback_query_handler(func=lambda call: call.data in ['additional_yes', 'additional_no'])
def handle_additional_question_response(call):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)

    if not state or not state.get('additional_question_asked'):
        return  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    user_response = "–î–∞" if call.data == 'additional_yes' else "–ù–µ—Ç"
    update_additional_stat(state['test_names'][state['current_test']], user_response)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º test_name

    # –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–¥–∞–Ω
    state['additional_question_asked'] = False

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
    if state['current_test'] < len(state['test_names']) - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç
        state['current_test'] += 1
        state['current_question'] = 0
        state['score'] = 0
        send_question(chat_id)
    else:
        # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        bot.send_message(chat_id, "üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏.")
        user_states.pop(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        users_set.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

def update_additional_stat(test_name, response):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    key = f"–î–æ–ø. –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ ¬´{test_name}¬ª"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º
    if key not in stats:
        stats[key] = {}

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –±—ã–ª —É—á—Ç–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if response not in stats[key]:
        stats[key][response] = 0

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–î–∞ –∏–ª–∏ –ù–µ—Ç)
    stats[key][response] += 1
@bot.callback_query_handler(func=lambda call: call.data == 'next_test')
def handle_next_test(call):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)

    if not state:
        return  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏


    state['current_test'] += 1
    state['current_question'] = 0
    state['score'] = 0

    if state['current_test'] < len(state['test_names']):
        send_question(chat_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        bot.send_message(chat_id, "üéâ –í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏.")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_states –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        user_states.pop(chat_id)

        # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_set.add(chat_id)

@bot.message_handler(commands=['stats'])
def handle_stats(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    if not stats:
        bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    response = f"üìä *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –≤—Å–µ —Ç–µ—Å—Ç—ã:* {len(users_set)}\n\n"
    response += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:*\n"

    for test, results in stats.items():
        if test.startswith("–î–æ–ø. –≤–æ–ø—Ä–æ—Å"):  # –≠—Ç–∏ –±–ª–æ–∫–∏ –≤—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ –Ω—É–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
            continue

        response += f"\n*{test}*\n"
        for result, count in results.items():
            response += f"‚Äî {result}: {count} —á–µ–ª.\n"

        # –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
        extra_key = f"–î–æ–ø. –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ ¬´{test}¬ª"
        if extra_key in stats:
            response += f"\n_–î–æ–ø. –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ ¬´{test}¬ª: ¬´–î–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –ø–æ—Å–ª–µ –∫–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥–∞?¬ª_\n"
            for answer, count in stats[extra_key].items():
                response += f"‚Äî {answer}: {count} —á–µ–ª.\n"

    bot.send_message(message.chat.id, response, parse_mode="Markdown")


# ========== üîÅ –ó–∞–ø—É—Å–∫ ==========
bot.polling(none_stop=True)
